name: Padavan-ZeroTier-Build

on:
  workflow_dispatch:
  push:
    tags: ['v*']

env:
  DEVICE: K2P
  BLOCK_SIZE: 15872
  ZT_REPO: https://github.com/zerotier/ZeroTierOne.git
  TOOLCHAIN_URL: https://cdn.jsdelivr.net/gh/hanwckf/padavan-4.4@toolchain/mipsel-4.4.x.tar.xz
  TOOLCHAIN_SHA256: 0019dfc4b32d63c1392aa264aed2253c1e0c2fb09216f8e2cc269bbfb8bb49b5

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    steps:
    # ========== 初始化环境 ==========
    - name: Setup base environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ca-certificates curl xz-utils tree \
          python3 python3-pip jq file

    # ========== 仓库克隆 ==========
    - name: Clone repository
      uses: actions/checkout@v4
      with:
        repository: hanwckf/padavan-4.4
        path: padavan-src
        ref: main
        fetch-depth: 100
        lfs: true

    # ========== 工具链管理 ==========
    - name: Install toolchain (verified)
      id: toolchain
      run: |
        cd padavan-src/toolchain-mipsel
        
        # 清理旧文件
        rm -rf toolchain-4.4.x *.tar.xz

        # 增强下载（5次重试+智能续传）
        for i in {1..5}; do
          echo "▷ 下载尝试 $i/5 (URL: $TOOLCHAIN_URL)"
          if curl -L \
             --fail \
             --retry 3 \
             --retry-delay 10 \
             --retry-max-time 60 \
             -C - \
             -o toolchain.tar.xz "$TOOLCHAIN_URL"; then
            break
          fi
          sleep $((i*15))
        done

        # 详细文件验证
        echo "▷ 文件验证阶段："
        echo "文件大小: $(du -h toolchain.tar.xz)"
        echo "文件类型: $(file toolchain.tar.xz)"
        echo "头部校验: $(xxd -l 16 toolchain.tar.xz)"

        # SHA256校验
        echo "▷ SHA256校验 (配置值: $TOOLCHAIN_SHA256)"
        ACTUAL_SHA=$(sha256sum toolchain.tar.xz | cut -d' ' -f1)
        if [ "$ACTUAL_SHA" != "$TOOLCHAIN_SHA256" ]; then
          echo "::error::校验失败！实际值: $ACTUAL_SHA"
          echo "解决方案："
          echo "1. 手动验证: curl -LO $TOOLCHAIN_URL && sha256sum toolchain.tar.xz"
          echo "2. 更新TOOLCHAIN_SHA256环境变量"
          exit 1
        fi

        # 解压验证
        echo "▷ 解压工具链（预览前5个文件）..."
        tar -tvJf toolchain.tar.xz | head -5
        mkdir -p toolchain-4.4.x
        if ! tar -xJvf toolchain.tar.xz -C toolchain-4.4.x --strip-components=1; then
          echo "::error::解压失败！最后5行日志："
          tail -5 tar.log
          exit 1
        fi

        # 编译器验证
        COMPILER="toolchain-4.4.x/bin/mipsel-linux-uclibc-gcc"
        if [ ! -x "$COMPILER" ]; then
          echo "::error::编译器验证失败！目录结构："
          tree -L 3 toolchain-4.4.x
          exit 1
        fi
        echo "TOOLCHAIN_PATH=$(pwd)/toolchain-4.4.x/bin" >> $GITHUB_ENV

    # ========== ZeroTier集成 ==========
    - name: Integrate ZeroTier
      run: |
        set -ex
        ZT_TAG=$(curl -s https://api.github.com/repos/zerotier/ZeroTierOne/releases/latest | jq -r .tag_name)
        echo "▷ 克隆ZeroTier版本: $ZT_TAG"
        git clone --depth 1 --branch "$ZT_TAG" "$ZT_REPO" zerotier-src
        
        mkdir -p padavan-src/trunk/user/zerotier
        cp -rv zerotier-src/* padavan-src/trunk/user/zerotier/
        
        cd padavan-src/trunk
        sed -i'' \
          -e '/CFLAGS += -Os/s/$/ -Wno-error=format-truncation -Wno-error=maybe-uninitialized/' \
          -e '/^LIBS/s/$/ -ljson-c -latomic/' \
          user/zerotier/Makefile
        
        cat << EOF >> .config
        # Auto-generated at $(date)
        CONFIG_FIRMWARE_INCLUDE_ZEROTIER=y
        CONFIG_FIRMWARE_INCLUDE_ZEROTIER_UI=y
        CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y
        CONFIG_FIRMWARE_OPTIMIZE_SHRINK=y
        EOF

    # ========== 智能构建 ==========
    - name: Build firmware
      run: |
        cd padavan-src/trunk
        ./clear_tree || echo "::warning::清理旧构建失败，继续..."
        
        export PATH="$TOOLCHAIN_PATH:$PATH"
        export CC=mipsel-linux-uclibc-gcc
        export STRIP=mipsel-linux-uclibc-strip
        
        # 动态资源分配
        TOTAL_MEM=$(free -m | awk '/Mem:/{print $2}')
        if [ "$TOTAL_MEM" -lt 4096 ]; then
          JOBS=2
        else
          JOBS=$(($(nproc)*3/4))
        fi
        echo "▷ 内存总量: ${TOTAL_MEM}MB | 使用并行任务数: $JOBS"

        # 带资源监控的构建
        /usr/bin/time -v \
        fakeroot ./build_firmware_modify "$DEVICE" "$BLOCK_SIZE" -j"$JOBS" \
          2>&1 | tee build.log

        [ -f "images/$DEVICE.trx" ] || {
          echo "::error::固件未生成！错误摘要："
          grep -iE 'error:|undefined' build.log | tail -n 20
          exit 1
        }

    # ========== 产物处理 ==========
    - name: Package artifacts
      run: |
        cd padavan-src/trunk/images
        [ -f "$DEVICE.trx" ] || exit 1
        
        # 压缩优化
        if command -v upx >/dev/null 2>&1; then
          echo "▷ 使用UPX压缩 (版本: $(upx -V | head -1))"
          upx --best --lzma "$DEVICE.trx" || true
        fi
        
        # 生成校验文件
        {
          echo "MD5:    $(md5sum "$DEVICE.trx" | cut -d' ' -f1)"
          echo "SHA256: $(sha256sum "$DEVICE.trx" | cut -d' ' -f1)"
        } > checksums.txt
        
        # 打包
        tar czvf "$DEVICE-zt-$(date +%Y%m%d-%H%M%S).tar.gz" \
          "$DEVICE.trx" \
          checksums.txt

    # ========== 错误诊断 ==========
    - name: Failure diagnostics
      if: ${{ failure() }}
      run: |
        echo "=== 系统诊断报告 ==="
        echo "▷ 内存状态:"
        free -m
        echo "▷ 磁盘使用:"
        df -h
        echo "▷ 最近内核消息:"
        dmesg | tail -n 20

        echo "=== 构建日志分析 ==="
        if [ -f "padavan-src/trunk/build.log" ]; then
          echo "▷ 最后50行日志:"
          tail -n 50 padavan-src/trunk/build.log
          echo "▷ 错误摘要:"
          grep -iE 'error:|warning:|undefined' padavan-src/trunk/build.log | sort | uniq -c
        else
          echo "::warning::构建日志不存在"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${DEVICE}-${GITHUB_RUN_ID}
        path: |
          padavan-src/trunk/images/*.tar.gz
          padavan-src/trunk/build.log
        retention-days: 7
