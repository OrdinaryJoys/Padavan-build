name: Padavan-ZeroTier Builder

on:
  workflow_dispatch:
  push:
    tags: ['v*']

env:
  DEVICE: K2P
  PADAVAN_REPO: https://github.com/hanwckf/padavan-4.4
  ZEROTIER_REPO: https://github.com/zerotier/ZeroTierOne

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    steps:
    # ========== 初始化环境 ==========
    - name: Setup environment
      run: |
        echo "BUILD_TIMESTAMP=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
        sudo apt-get -qq update
        sudo apt-get -qq install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd \
            fakeroot kmod cpio git python3-docutils gettext automake autopoint \
            texinfo build-essential help2man pkg-config zlib1g-dev libgmp3-dev \
            libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget

    # ========== 克隆仓库 ==========
    - name: Clone Padavan with submodules
      run: |
        git clone --depth=1 --branch main --recurse-submodules $PADAVAN_REPO padavan-4.4
        cd padavan-4.4
        git submodule update --init --recursive trunk
        echo "PADAVAN_DIR=$GITHUB_WORKSPACE/padavan-4.4" >> $GITHUB_ENV

    - name: Clone ZeroTier
      run: |
        git clone --depth=1 $ZEROTIER_REPO ZeroTierSource
        echo "ZEROTIER_SRC=$GITHUB_WORKSPACE/ZeroTierSource" >> $GITHUB_ENV

    # ========== 验证仓库结构 ==========
    - name: Validate repository structure
      run: |
        echo "=== Padavan目录结构验证 ==="
        ls -l $PADAVAN_DIR/trunk/configs/templates/
        [ -f "$PADAVAN_DIR/trunk/build_firmware_modify" ] || exit 1
        [ -d "$PADAVAN_DIR/trunk/user" ] || exit 1

    # ========== 准备工具链 ==========
    - name: Setup toolchain
      timeout-minutes: 20
      run: |
        cd $PADAVAN_DIR/toolchain-mipsel
        # 使用镜像加速下载
        sed -i 's!https://github.com!https://ghproxy.com/https://github.com!g' dl_toolchain.sh
        ./dl_toolchain.sh
        echo "$PADAVAN_DIR/toolchain-mipsel/toolchain-4.4.x/bin" >> $GITHUB_PATH

    # ========== 集成ZeroTier ==========
    - name: Integrate ZeroTier
      run: |
        cd $PADAVAN_DIR/trunk
        mkdir -p user/zerotier
        
        # 带重试机制的文件复制
        for i in {1..3}; do
          if cp -r "$ZEROTIER_SRC/"* user/zerotier/; then
            break
          else
            echo "::warning:: 文件复制失败，第$i次重试..."
            sleep 5
          fi
        done

        # 生成Makefile
        cat > user/zerotier/Makefile <<'EOF'
        include $(TOPDIR)/rules.mk
        PKG_NAME:=zerotier
        PKG_VERSION:=$(shell git -C $(CURDIR) describe --tags 2>/dev/null || echo 1.12.2)
        
        include $(INCLUDE_DIR)/package.mk
        
        define Package/zerotier
          SECTION:=net
          CATEGORY:=Network
          TITLE:=ZeroTier One
          DEPENDS:=+libpthread +libstdcpp +kmod-tun +libopenssl +libjson-c
        endef
        
        CONFIGURE_ARGS += \
          --host=mipsel-linux-uclibc \
          --enable-static \
          --disable-selinux \
          ZT_ENABLE_NETWORK_CONTROLLER=0
        
        define Build/Compile
          $(MAKE) -C $(PKG_BUILD_DIR)/one \
            CC="$(TARGET_CC)" \
            CXX="$(TARGET_CXX)" \
            STRIP="$(TARGET_STRIP)"
        endef
        
        define Package/zerotier/install
          $(INSTALL_DIR) $(1)/usr/bin
          $(INSTALL_BIN) $(PKG_BUILD_DIR)/one/zerotier-one $(1)/usr/bin/
          ln -sf zerotier-one $(1)/usr/bin/zerotier-cli
        endef
        
        $(eval $(call BuildPackage,zerotier))
        EOF

    # ========== 配置编译选项 ==========
    - name: Configure build
      run: |
        cd $PADAVAN_DIR/trunk
        
        # 清理环境
        ./clear_tree
        
        # 生成初始配置
        TEMPLATE_FILE="configs/templates/$DEVICE.config"
        [ -f "$TEMPLATE_FILE" ] || cp configs/templates/default.config "$TEMPLATE_FILE"
        
        # 注入配置参数
        CONFIG_OPTS=(
          "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=y"
          "CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y"
          "CONFIG_FIRMWARE_INCLUDE_JQ=y"
        )
        for opt in "${CONFIG_OPTS[@]}"; do
          if ! grep -q "^$opt" "$TEMPLATE_FILE"; then
            echo "$opt" >> "$TEMPLATE_FILE"
          fi
        done
        
        # 生成配置
        fakeroot ./build_firmware_modify --dry-run "$DEVICE"
        
        # 强制写入配置项
        for opt in "${CONFIG_OPTS[@]}"; do
          if ! grep -q "^$opt" .config; then
            echo "$opt" >> .config
          fi
        done
        
        # 验证配置
        grep -q "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=y" .config || exit 1

    # ========== 编译固件 ==========
    - name: Build firmware
      timeout-minutes: 60
      run: |
        cd $PADAVAN_DIR/trunk
        
        # 创建交换空间
        sudo fallocate -l 2G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        
        # 编译带重试机制
        for i in {1..3}; do
          if fakeroot ./build_firmware_modify "$DEVICE"; then
            break
          else
            echo "::warning:: 编译失败，第$i次重试..."
            make clean
            sleep 10
          fi
        done
        
        # 验证输出文件
        if [ ! -f "images/$DEVICE.trx" ]; then
          echo "::error:: 编译产物未生成"
          exit 1
        fi
        
        mkdir -p "$GITHUB_WORKSPACE/output"
        cp images/*.trx "$GITHUB_WORKSPACE/output/"

    # ========== 上传产物 ==========
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.DEVICE }}_ZT_${{ env.BUILD_TIMESTAMP }}
        path: $GITHUB_WORKSPACE/output/*.trx
        retention-days: 7

    # ========== 后期清理 ==========
    - name: Cleanup
      if: always()
      run: |
        sudo swapoff /swapfile
        sudo rm -f /swapfile
        rm -rf "$PADAVAN_DIR" "$ZEROTIER_SRC"
