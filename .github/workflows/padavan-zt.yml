name: Padavan-ZeroTier 固件构建

on:
  workflow_dispatch:
  push:
    tags: ['v*']

env:
  DEVICE: K2P  # 修改为你的设备型号
  PADAVAN_REPO: https://github.com/hanwckf/padavan-4.4
  ZEROTIER_REPO: https://github.com/zerotier/ZeroTierOne
  ZEROTIER_BRANCH: main
  BUILD_TIMESTAMP: $(date -u +"%Y%m%dT%H%M%SZ")

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180

    steps:
    # ========== 基础环境配置 ==========
    - name: 设置构建环境
      run: |
        echo "BUILD_TIMESTAMP=$(date -u +'%Y%m%dT%H%M%SZ')" >> $GITHUB_ENV
        sudo apt-get -qq update
        sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install \
            unzip libtool-bin curl cmake gperf gawk flex bison nano xxd \
            fakeroot kmod cpio git python3-docutils gettext automake autopoint \
            texinfo build-essential help2man pkg-config zlib1g-dev libgmp3-dev \
            libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget jq rsync \
            libssl-dev libjson-c-dev

    # ========== 克隆 Padavan 仓库 ==========
    - name: 克隆 Padavan
      timeout-minutes: 15
      run: |
        for i in {1..3}; do
          echo "⟳ 克隆 Padavan (尝试 $i/3)..."
          git clone --depth=1 --branch=main "$PADAVAN_REPO" padavan-4.4 && break
          sleep 10
          [ $i -eq 3 ] && { echo "::error:: Padavan 克隆失败"; exit 1; }
        done
        echo "PADAVAN_DIR=$GITHUB_WORKSPACE/padavan-4.4" >> $GITHUB_ENV

        # 修复子模块
        cd padavan-4.4
        git submodule sync
        git submodule update --init --recursive trunk || {
          echo "::error:: 子模块更新失败"
          exit 1
        }

    # ========== 克隆 ZeroTier 仓库 ==========
    - name: 克隆 ZeroTier
      timeout-minutes: 15
      run: |
        for i in {1..3}; do
          echo "⟳ 克隆 ZeroTier (尝试 $i/3)..."
          git clone --depth=1 --branch="$ZEROTIER_BRANCH" "$ZEROTIER_REPO" ZeroTierSource && break
          sleep 10
          [ $i -eq 3 ] && { echo "::error:: ZeroTier 克隆失败"; exit 1; }
        done

        # 新版结构验证
        [ -f "ZeroTierSource/one.cpp" ] || {
          echo "::error:: ZeroTier 结构异常"
          ls -l ZeroTierSource
          exit 1
        }

    # ========== 工具链安装 ==========
    - name: 安装工具链
      timeout-minutes: 30
      run: |
        cd $PADAVAN_DIR/toolchain-mipsel
        
        # 多镜像源配置（更新后的地址）
        declare -A mirrors=(
            ["official"]="https://github.com/hanwckf/padavan-toolchain/releases/download/4.4.x/toolchain-4.4.x.tar.gz"
            ["ghproxy"]="https://ghproxy.com/https://github.com/hanwckf/padavan-toolchain/releases/download/4.4.x/toolchain-4.4.x.tar.gz"
            ["fastgit"]="https://hub.fastgit.xyz/hanwckf/padavan-toolchain/releases/download/4.4.x/toolchain-4.4.x.tar.gz"
            ["china-cdn"]="https://toolchain.padavan.cn/toolchain-4.4.x.tar.gz"
        )

        # 第一层下载尝试
        for mirror in "${!mirrors[@]}"; do
          echo "⟳ 尝试镜像源: $mirror"
          if curl -fL --connect-timeout 20 --retry 3 --retry-delay 5 \
              "${mirrors[$mirror]}" -o toolchain.tar.gz; then
            echo "✓ 下载成功"
            if tar -ztf toolchain.tar.gz >/dev/null; then
              echo "✔ 文件校验通过"
              break 2
            else
              echo "⚠ 文件损坏，继续尝试..."
              rm -f toolchain.tar.gz
            fi
          fi
        done

        # 第二层备用下载（archive.org备份）
        if [ ! -f toolchain.tar.gz ]; then
          echo "⟳ 尝试 archive.org 备份..."
          curl -fL https://archive.org/download/padavan-toolchain-4.4.x/toolchain-4.4.x.tar.gz -o toolchain.tar.gz
        fi

        # 最终校验
        tar -zxvf toolchain.tar.gz || {
          echo "::error:: 工具链解压失败"
          exit 1
        }
        echo "$PADAVAN_DIR/toolchain-mipsel/toolchain-4.4.x/bin" >> $GITHUB_PATH

    # ========== ZeroTier 集成 ==========
    - name: 集成 ZeroTier
      run: |
        cd $PADAVAN_DIR/trunk
        rm -rf user/zerotier
        mkdir -p user/zerotier

        # 复制源码（排除不需要的文件）
        rsync -av --info=progress2 "$GITHUB_WORKSPACE/ZeroTierSource/" user/zerotier/ \
            --exclude={.git,.github,doc,artwork,windows,debian,java}

        # 新版 Makefile 配置
        cat > user/zerotier/Makefile <<'EOF'
        include $(TOPDIR)/rules.mk
        
        PKG_NAME:=zerotier
        PKG_VERSION:=$(shell git -C $(CURDIR) describe --tags 2>/dev/null || echo 1.12.2)
        PKG_RELEASE:=1
        
        include $(INCLUDE_DIR)/package.mk
        
        define Package/zerotier
            SECTION:=net
            CATEGORY:=Network
            TITLE:=ZeroTier One
            URL:=https://www.zerotier.com/
            DEPENDS:=+libpthread +libstdcpp +kmod-tun +libopenssl +libjson-c
        endef
        
        CONFIGURE_ARGS += \
            --host=mipsel-linux-uclibc \
            --enable-static \
            --disable-selinux \
            ZT_ENABLE_NETWORK_CONTROLLER=0
        
        define Build/Compile
            $(MAKE) -C $(PKG_BUILD_DIR) \
                CC="$(TARGET_CC)" \
                CXX="$(TARGET_CXX)" \
                STRIP="$(TARGET_STRIP)"
        endef
        
        define Package/zerotier/install
            $(INSTALL_DIR) $(1)/usr/bin
            $(INSTALL_BIN) $(PKG_BUILD_DIR)/zerotier-one $(1)/usr/bin/
            ln -sf zerotier-one $(1)/usr/bin/zerotier-cli
            $(INSTALL_DIR) $(1)/etc/init.d
            $(INSTALL_BIN) ./scripts/zerotier.init $(1)/etc/init.d/zerotier
        endef
        
        $(eval $(call BuildPackage,zerotier))
        EOF

    # ========== 配置系统 ==========
    - name: 生成配置
      run: |
        cd $PADAVAN_DIR/trunk
        
        # 清理并生成新配置
        ./clear_tree
        yes "" | make oldconfig
        echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=y" >> .config

        # 验证关键配置
        grep -q "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=y" .config || {
          echo "::error:: ZeroTier 配置缺失"
          exit 1
        }

    # ========== 编译固件 ==========
    - name: 执行编译
      timeout-minutes: 150
      run: |
        cd $PADAVAN_DIR/trunk
        
        # 内存优化
        sudo dd if=/dev/zero of=/swapfile bs=1M count=2048
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile

        # 带错误监控的编译
        fakeroot ./build_firmware_modify "$DEVICE" V=99 || {
          echo "::error:: 编译失败，最后10条日志："
          tail -n 10 build.log
          exit 1
        }

        # 清理交换空间
        sudo swapoff /swapfile
        sudo rm -f /swapfile

    # ========== 上传产物 ==========
    - name: 上传固件
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.DEVICE }}_ZT_${{ env.BUILD_TIMESTAMP }}
        path: ${{ env.PADAVAN_DIR }}/trunk/images/*.trx
        retention-days: 7
