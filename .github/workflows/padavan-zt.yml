name: Padavan-ZeroTier Builder

on:
  workflow_dispatch:
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      DEVICE: K2P
      PADAVAN_REPO: https://github.com/hanwckf/padavan-4.4
      ZEROTIER_REPO: https://github.com/zerotier/ZeroTierOne

    steps:
    # ========== 环境初始化 ==========
    - name: Setup environment
      run: |
        echo "BUILD_TIMESTAMP=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
        sudo apt-get -qq update
        sudo apt-get -qq install $(curl -fsSL https://is.gd/padavan_deps | tr '\n' ' ')

    # ========== 仓库克隆（关键修正） ==========
    - name: Clone repositories
      run: |
        # Padavan主仓库带子模块初始化
        git clone --depth=1 --branch=main --recurse-submodules=trunk $PADAVAN_REPO
        cd padavan-4.4
        git submodule update --init --recursive trunk
        echo "PADAVAN_DIR=$GITHUB_WORKSPACE/padavan-4.4" >> $GITHUB_ENV
        
        # ZeroTier仓库
        git clone --depth=1 $ZEROTIER_REPO
        echo "ZEROTIER_SRC=$GITHUB_WORKSPACE/ZeroTierOne" >> $GITHUB_ENV

    # ========== 权限修复（关键步骤） ==========
    - name: Fix permissions
      run: |
        sudo chown -R $(whoami):$(whoami) $PADAVAN_DIR
        find $PADAVAN_DIR -type d -exec chmod 755 {} \;
        chmod +x $PADAVAN_DIR/trunk/build_firmware_modify

    # ========== 工具链安装（带镜像加速） ==========
    - name: Setup toolchain
      timeout-minutes: 25
      run: |
        cd $PADAVAN_DIR/toolchain-mipsel
        # 使用镜像加速
        sed -i 's!https://.*/toolchain-!https://ghproxy.com/&!g' dl_toolchain.sh
        ./dl_toolchain.sh
        echo "$PADAVAN_DIR/toolchain-mipsel/toolchain-4.4.x/bin" >> $GITHUB_PATH

    # ========== ZeroTier集成（增强验证） ==========
    - name: Integrate ZeroTier
      run: |
        cd $PADAVAN_DIR/trunk
        mkdir -p user/zerotier
        cp -r $ZEROTIER_SRC/* user/zerotier/
        
        # 生成完整Makefile
        cat > user/zerotier/Makefile <<'EOF'
        include $(TOPDIR)/rules.mk
        PKG_NAME:=zerotier
        PKG_VERSION:=$(shell git -C $(CURDIR) describe --tags 2>/dev/null || echo 1.12.2)
        
        include $(INCLUDE_DIR)/package.mk
        
        define Package/zerotier
          SECTION:=net
          CATEGORY:=Network
          TITLE:=ZeroTier One
          DEPENDS:=+libpthread +libstdcpp +kmod-tun +libopenssl +libjson-c
          URL:=https://www.zerotier.com/
        endef
        
        CONFIGURE_ARGS += \
          --host=mipsel-linux-uclibc \
          --enable-static \
          --disable-selinux \
          ZT_ENABLE_NETWORK_CONTROLLER=0
        
        define Build/Compile
          $(MAKE) -C $(PKG_BUILD_DIR)/one \
            CC="$(TARGET_CC)" \
            CXX="$(TARGET_CXX)" \
            STRIP="$(TARGET_STRIP)" \
            ZT_ENABLE_NETWORK_CONTROLLER=0
        endef
        
        define Package/zerotier/install
          $(INSTALL_DIR) $(1)/usr/bin
          $(INSTALL_BIN) $(PKG_BUILD_DIR)/one/zerotier-one $(1)/usr/bin/
          ln -sf zerotier-one $(1)/usr/bin/zerotier-cli
          $(INSTALL_DIR) $(1)/etc/init.d
          $(INSTALL_BIN) ./scripts/zerotier.init $(1)/etc/init.d/zerotier
        endef
        
        $(eval $(call BuildPackage,zerotier))
        EOF

    # ========== 配置系统（最终解决方案） ==========
    - name: Configure system
      run: |
        cd $PADAVAN_DIR/trunk
        
        # 初始化模板系统
        mkdir -p configs/templates
        [ -f "configs/templates/$DEVICE.config" ] || \
          cp configs/templates/default.config "configs/templates/$DEVICE.config" 2>/dev/null || \
          touch "configs/templates/$DEVICE.config"
        
        # 注入配置参数（带重复检查）
        declare -A CONFIG_MAP=(
          ["ZEROTIER"]=y
          ["OPENSSL_EXE"]=y
          ["JQ"]=y
        )
        for key in "${!CONFIG_MAP[@]}"; do
          var_name="CONFIG_FIRMWARE_INCLUDE_${key}"
          var_value="${CONFIG_MAP[$key]}"
          grep -q "^$var_name=" "configs/templates/$DEVICE.config" || \
            echo "$var_name=$var_value" >> "configs/templates/$DEVICE.config"
        done
        
        # 生成基础配置（带fakeroot）
        fakeroot ./build_firmware_modify --dry-run "$DEVICE"
        
        # 应急配置恢复
        if [ ! -f ".config" ]; then
          echo "::error:: 主配置丢失，执行紧急恢复"
          cp "configs/templates/$DEVICE.config" .config
          yes "" | make oldconfig
        fi
        
        # 强制配置验证
        for key in "${!CONFIG_MAP[@]}"; do
          var_name="CONFIG_FIRMWARE_INCLUDE_${key}"
          if ! grep -q "^$var_name=${CONFIG_MAP[$key]}" .config; then
            echo "::warning:: 强制注入 $var_name"
            sed -i "/^$var_name/d" .config
            echo "$var_name=${CONFIG_MAP[$key]}" >> .config
          fi
        done
        
        # 生成最终配置
        yes "" | make oldconfig

    # ========== 编译阶段（带资源优化） ==========
    - name: Build firmware
      timeout-minutes: 120
      run: |
        cd $PADAVAN_DIR/trunk
        
        # 创建交换空间（针对GitHub内存限制）
        sudo fallocate -l 2G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        
        # 启动编译（带错误重试）
        for i in {1..3}; do
          if fakeroot ./build_firmware_modify "$DEVICE"; then
            break
          else
            echo "::warning:: 编译失败，尝试第$i次重试..."
            make clean
          fi
        done
        
        # 验证输出
        if [ ! -f "images/$DEVICE.trx" ]; then
          echo "::error:: 最终固件未生成"
          exit 1
        fi
        
        mkdir -p "$GITHUB_WORKSPACE/output"
        cp images/*.trx "$GITHUB_WORKSPACE/output/"

    # ========== 产物处理 ==========
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.DEVICE }}_ZT_${{ env.BUILD_TIMESTAMP }}
        path: $GITHUB_WORKSPACE/output/*.trx
        retention-days: 7

    # ========== 调试信息收集 ==========
    - name: Collect debug info
      if: always()
      run: |
        cd $PADAVAN_DIR/trunk
        echo "=== 关键文件校验 ==="
        sha256sum .config
        sha256sum configs/templates/$DEVICE.config
        echo "=== 内存使用情况 ==="
        free -m
        echo "=== 存储空间 ==="
        df -h
