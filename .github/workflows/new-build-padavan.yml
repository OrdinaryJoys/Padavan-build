name: Padavan AutoBuilder

on:
  workflow_dispatch:
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      DEVICE: K2P
      BLOCK_SIZE: 15872
      ZT_ENABLED: "y"
      TOOLCHAIN_DIR: ${{ github.workspace }}/padavan-4.4/toolchain-mipsel/toolchain-4.4.x

    steps:
    # ========== 代码检出 ==========
    - name: Checkout code
      uses: actions/checkout@v4

    # ========== 依赖安装 ==========
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          unzip libtool-bin curl cmake gperf gawk flex bison \
          fakeroot kmod cpio git python3-docutils gettext automake autopoint \
          texinfo build-essential help2man pkg-config zlib1g-dev libgmp3-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget libc-dev-bin \
          libssl-dev libjson-c-dev

    # ========== 源码准备 ==========
    - name: Prepare source
      run: |
        git clone --depth=1 https://github.com/hanwckf/padavan-4.4.git || { echo "::error::Clone failed"; exit 1; }
        cd padavan-4.4/toolchain-mipsel || { echo "::error::Directory missing"; exit 1; }
        ./dl_toolchain.sh
        
        # 验证工具链下载
        if [ ! -d "toolchain-4.4.x" ]; then
          echo "::error::Toolchain download failed!"
          exit 1
        fi
        
        sudo mkdir -p /opt/images

    # ========== 配置阶段 ==========
    - name: Configure firmware
      shell: bash
      run: |
        cd padavan-4.4/trunk || { echo "::error::Can't enter trunk"; exit 1; }

        # 修复xTun缺失问题
        if [ ! -d "user/xTun" ]; then
          git clone https://github.com/hanwckf/xTun.git user/xTun || { echo "::error::Failed to clone xTun"; exit 1; }
        fi

        # 应用基础配置
        if [ ! -f "configs/templates/${DEVICE}.config" ]; then
          echo "::error::[${DEVICE}] Template not found"
          exit 1
        fi
        cp -vf "configs/templates/${DEVICE}.config" .config

        # 清理配置项
        declare -a CONFIG_CLEAN=(
          "CONFIG_FIRMWARE_INCLUDE_ZEROTIER"
          "CONFIG_FIRMWARE_INCLUDE_ADBYBY"
        )
        for target in "${CONFIG_CLEAN[@]}"; do
          sed -i "/^${target}=/d" .config
        done

        # 写入新配置
        echo "CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=${ZT_ENABLED}" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_ADBYBY=n" >> .config

        # 设置交叉编译环境
        echo "CROSS_COMPILE=${TOOLCHAIN_DIR}/bin/mipsel-linux-uclibc-" > .cross-compile
        export PATH="${TOOLCHAIN_DIR}/bin:$PATH"

    # ========== 构建阶段 ==========
    - name: Build firmware
      run: |
        cd padavan-4.4/trunk || { echo "::error::Trunk missing"; exit 1; }
        source .cross-compile
        
        # 环境验证
        if [ ! -f "${TOOLCHAIN_DIR}/bin/mipsel-linux-uclibc-gcc" ]; then
          echo "::error::Compiler not found at ${TOOLCHAIN_DIR}/bin/mipsel-linux-uclibc-gcc"
          exit 1
        fi

        sudo ./clear_tree || { echo "::error::Clean failed"; exit 1; }

        echo "::group::Kernel Build"
        make kernel ARCH=mips CROSS_COMPILE=${CROSS_COMPILE} || exit 1
        echo "::endgroup::"

        echo "::group::Modules Build"
        make modules ARCH=mips CROSS_COMPILE=${CROSS_COMPILE} -j$(nproc) || exit 1
        echo "::endgroup::"

        echo "::group::Firmware Compilation"
        if ! sudo ./build_firmware_modify "$DEVICE" "$BLOCK_SIZE"; then
          echo "::warning::Retrying with reduced block size..."
          if ! sudo ./build_firmware_modify "$DEVICE" $((BLOCK_SIZE - 1024)); then
            echo "::error::Build failed after retry"
            exit 1
          fi
        fi
        echo "::endgroup::"

        # 产物验证
        if [ -z "$(find images/ -maxdepth 1 -name '*.trx' -print -quit)" ]; then
          echo "::error::No firmware generated"
          exit 1
        fi
        sudo mv -v images/*.trx /opt/images/

    # ========== 调试信息 ==========
    - name: Show Build Info
      run: |
        echo "=== Toolchain Verification ==="
        file ${TOOLCHAIN_DIR}/bin/mipsel-linux-uclibc-gcc
        ${TOOLCHAIN_DIR}/bin/mipsel-linux-uclibc-gcc --version
        echo "=== xTun Verification ==="
        ls -l padavan-4.4/trunk/user/xTun

    # ========== 产物上传 ==========
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.DEVICE }}-Firmware-$(date +%Y%m%d-%H%M%S)
        path: /opt/images/*.trx
