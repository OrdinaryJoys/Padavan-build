name: Padavan Builder

on:
  release:
    types: [published]
  push:
    tags: ['v*']
  workflow_dispatch:

jobs:
  firmware-build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    env:
      BUILD_DIR: padavan-4.4
      OUTPUT_DIR: /opt/images
      DEVICE_MODEL: K2P
      REPO_URL: https://github.com/MeIsReallyBa/padavan-4.4.git

    steps:
    # ==================== 环境准备阶段 ====================
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Configure environment
      run: |
        # 系统更新与依赖安装
        sudo sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list
        sudo apt update -y
        sudo apt install -y --no-install-recommends \
          squashfs-tools=1:4.5-1ubuntu1 \
          binwalk \
          liblz4-tool \
          zstd \
          unzip libtool-bin cmake gperf flex bison \
          git automake autoconf build-essential \
          zlib1g-dev libgmp-dev libmpc-dev libmpfr-dev \
          gettext texinfo help2man xxd vim-common \
          python3-docutils fakeroot kmod cpio \
          libssl-dev libjson-c-dev libhttp-parser-dev

        # 备用xxd安装方案
        if ! command -v xxd &> /dev/null; then
          wget http://archive.ubuntu.com/ubuntu/pool/main/v/vim/vim_8.2.3995-1ubuntu2.21_amd64.deb
          sudo dpkg -i vim_8.2.3995-1ubuntu2.21_amd64.deb || true
          sudo apt install -y -f
        fi

    # ==================== 工具链准备阶段 ====================
    - name: Prepare toolchain
      run: |
        git clone --depth=1 ${{ env.REPO_URL }}
        cd ${{ env.BUILD_DIR }}/toolchain-mipsel
        ./dl_toolchain.sh
        sudo mkdir -p ${{ env.OUTPUT_DIR }} && sudo chmod 777 ${{ env.OUTPUT_DIR }}

    # ==================== 固件构建阶段 ====================
    - name: Build firmware
      run: |
        cd ${{ env.BUILD_DIR }}/trunk

        # 内核Squashfs配置
        KERNEL_CFG="configs/boards/${{ env.DEVICE_MODEL }}/kernel-4.4.x.config"
        echo "CONFIG_SQUASHFS=y" >> $KERNEL_CFG
        echo "CONFIG_SQUASHFS_XZ=y" >> $KERNEL_CFG
        echo "CONFIG_SQUASHFS_EMBEDDED=y" >> $KERNEL_CFG
        echo "CONFIG_SQUASHFS_FRAGMENT_CACHE_SIZE=3" >> $KERNEL_CFG

        # 固件配置（保持原有功能配置）
        cp configs/templates/${{ env.DEVICE_MODEL }}.config .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        
        # 清理并编译
        sudo ./clear_tree
        echo "=== 开始编译（单线程模式）==="
        sudo ./build_firmware_modify ${{ env.DEVICE_MODEL }} 0 -j1 | tee build.log

        # 日志分析
        grep -iE 'error|warning' build.log | grep -iv 'deprecated' || true
        [ ! -d images ] && echo "::error::编译输出目录缺失" && exit 1

        # 生成元数据
        TRX_FILE=$(ls images/*.trx | head -n1)
        echo "TRX_FILE=$TRX_FILE" >> $GITHUB_ENV
        sudo mv $TRX_FILE ${{ env.OUTPUT_DIR }}/

    # ==================== 固件验证阶段 ====================
    - name: Verify firmware
      run: |
        # 基础校验
        TRX_PATH="${{ env.OUTPUT_DIR }}/$(ls ${{ env.OUTPUT_DIR }} | grep .trx)"
        [ $(stat -c%s "$TRX_PATH") -lt 8000000 ] && echo "::error::固件大小异常" && exit 1

        # 多重验证方法
        echo "=== 方法1: 文件头验证 ==="
        HEADER_HEX=$(xxd -p -l 4 $TRX_PATH)
        [ "$HEADER_HEX" != "68737173" ] && echo "::error::无效Squashfs头" && exit 1

        echo "=== 方法2: Binwalk分析 ==="
        binwalk -t -v $TRX_PATH | grep 'Squashfs filesystem' || {
          echo "::error::Binwalk验证失败";
          exit 1;
        }

        echo "=== 方法3: 部分解压验证 ==="
        TEMP_DIR=$(mktemp -d)
        dd if=$TRX_PATH bs=1M count=2 2>/dev/null | unsquashfs -d $TEMP_DIR - || {
          echo "::error::部分解压失败";
          exit 1;
        }
        [ ! -f "$TEMP_DIR/usr/bin/zerotier-one" ] && echo "::error::关键文件缺失" && exit 1
        rm -rf $TEMP_DIR

        echo "✓ 固件验证通过"

    # ==================== 产物上传阶段 ====================
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.DEVICE_MODEL }}-$(date +%Y%m%d)
        path: ${{ env.OUTPUT_DIR }}/*.trx
        retention-days: 5

    # ==================== 后清理阶段 ====================
    - name: Cleanup
      if: always()
      run: |
        sudo rm -rf ${{ env.BUILD_DIR }}
        sudo rm -f ${{ env.OUTPUT_DIR }}/*
