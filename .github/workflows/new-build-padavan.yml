name: Build Padavan Firmware

on:
  push:
    tags: ['v*']
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      DEVICE: K2P  # 需与configs/templates下的配置文件名一致
      REPO_URL: https://github.com/MeIsReallyBa/padavan-4.4.git

    steps:
    # ==================== 1. 准备编译环境 ====================
    - name: Setup environment
      run: |
        # 配置国内镜像源
        sudo sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list
        sudo sed -i 's/security.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list
        
        # 安装基础依赖
        sudo apt update -y
        sudo apt install -y --no-install-recommends \
          unzip libtool-bin curl cmake gperf gawk flex bison \
          fakeroot kmod cpio git python3-docutils gettext \
          texinfo build-essential help2man pkg-config \
          zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev \
          libncurses5-dev libltdl-dev xxd
        
        # 安装验证工具
        sudo apt install -y binwalk squashfs-tools

    # ==================== 2. 获取源码 ====================
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Clone Padavan repo
      run: |
        git clone --depth=1 --branch master ${{ env.REPO_URL }} padavan
        cd padavan/toolchain-mipsel
        
        # 下载预编译工具链
        ./dl_toolchain.sh
        echo "工具链信息："
        ../toolchain-mipsel/mipsel-linux-uclibc/bin/mipsel-linux-uclibc-gcc --version

    # ==================== 3. 配置编译参数 ====================
    - name: Configure build
      run: |
        cd padavan/trunk
        
        # 检查设备配置文件
        CONFIG_FILE="configs/templates/$DEVICE.config"
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "::error::找不到设备配置文件: $CONFIG_FILE"
          exit 1
        fi
        
        # 初始化配置
        cp -v "$CONFIG_FILE" .config
        
        # 启用必要功能
        echo "CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_IPV6_NAT=y" >> .config
        
        # 内核参数配置
        KERNEL_CFG="configs/boards/$DEVICE/kernel-4.4.x.config"
        echo "CONFIG_SQUASHFS=y" >> $KERNEL_CFG
        echo "CONFIG_SQUASHFS_XZ=y" >> $KERNEL_CFG

    # ==================== 4. 执行编译 ====================
    - name: Build firmware
      run: |
        cd padavan/trunk
        
        # 清理并编译
        ./clear_tree
        fakeroot ./build_firmware_modify $DEVICE -j$(nproc)
        
        # 检查产物
        if [ ! -d images ]; then
          echo "::error::编译失败，未生成镜像文件"
          exit 1
        fi

    # ==================== 5. 验证镜像文件 ====================
    - name: Validate firmware
      run: |
        TRX_FILE=$(ls padavan/trunk/images/*.trx | head -n1)
        
        # 基础验证
        if [ $(stat -c%s "$TRX_FILE") -lt 8000000 ]; then
          echo "::error::固件大小异常: $(du -h $TRX_FILE)"
          exit 1
        fi
        
        # 文件头验证
        if ! file "$TRX_FILE" | grep -q "Squashfs filesystem"; then
          echo "::error::无效的文件格式"
          exit 1
        fi
        
        # 关键文件检查
        TEMP_DIR=$(mktemp -d)
        unsquashfs -d $TEMP_DIR $TRX_FILE
        CHECK_FILES=(
          "/usr/bin/ash"
          "/sbin/init"
          "/etc/storage/web/default.asp"
        )
        for f in "${CHECK_FILES[@]}"; do
          if [ ! -f "$TEMP_DIR$f" ]; then
            echo "::error::缺失关键文件: $f"
            exit 1
          fi
        done
        rm -rf $TEMP_DIR

    # ==================== 6. 发布产物 ====================
    - name: Upload firmware
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.DEVICE }}-firmware
        path: padavan/trunk/images/*.trx
        retention-days: 7

    # ==================== 7. 清理环境 ====================
    - name: Cleanup
      if: always()
      run: |
        sudo rm -rf padavan
