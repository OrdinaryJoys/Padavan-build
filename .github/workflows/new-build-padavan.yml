name: Build Padavan

on: 
  release:
    types: [published]
  push:
    tags: ['v*']
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    env:
      REPO_URL: https://github.com/MeIsReallyBa/padavan-4.4.git  # 修改源码地址
      TOOLCHAIN_DIR: mipsel-linux-uclibc

    steps:
    # ==================== 1. 检出代码 ====================
    - name: Checkout
      uses: actions/checkout@v4

    # ==================== 2. 初始化环境 ====================
    - name: Setup environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list
        sudo sed -i 's/security.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list
        sudo apt update -y
        sudo apt install -y --no-install-recommends \
          unzip libtool-bin curl cmake gperf gawk flex bison xxd \
          fakeroot kmod cpio git python3-docutils gettext automake \
          texinfo build-essential help2man pkg-config zlib1g-dev \
          libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev

    # ==================== 3. 获取源码 ====================
    - name: Clone source
      run: |
        # 明确指定分支（根据实际仓库分支调整）
        git clone --depth=1 -b main ${{ env.REPO_URL }} padavan  # -b 后接实际分支名
        cd padavan
        
        # 动态检测代码结构
        if [ -d "trunk" ]; then
          echo "WORKSPACE=trunk" >> $GITHUB_ENV
        else
          echo "WORKSPACE=." >> $GITHUB_ENV
        fi
        
        echo "=== 仓库结构验证 ==="
        ls -l ${{ env.WORKSPACE }}/configs/templates/

    # ==================== 4. 工具链配置 ====================
    - name: Setup toolchain
      run: |
        cd padavan/toolchain-mipsel
        
        # 清理旧文件并下载工具链
        rm -rf ${{ env.TOOLCHAIN_DIR }} *.tar.xz
        
        # 带重试的下载机制
        for i in {1..3}; do
          ./dl_toolchain.sh && break || sleep 30
        done
        
        # 解压验证
        tar -xvf mipsel-linux-uclibc.tar.xz
        chmod -R +x ${{ env.TOOLCHAIN_DIR }}
        
        # 工具链验证
        ${{ env.TOOLCHAIN_DIR }}/bin/mipsel-linux-uclibc-gcc --version || {
          echo "::error::工具链校验失败";
          exit 1;
        }

    # ==================== 5. 固件配置 ====================
    - name: Configure firmware
      env:
        TNAME: K2P  # 修改设备型号
      run: |
        cd padavan/${{ env.WORKSPACE }}
        
        # 配置文件检查
        CONFIG_FILE="configs/templates/$TNAME.config"
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "::error::配置文件 $CONFIG_FILE 不存在!"
          ls configs/templates/
          exit 1
        fi
        
        # 基础配置
        cp -v "$CONFIG_FILE" .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        
        # 使用循环清理配置项
        for item in MENTOHUST SCUTCLIENT SHADOWSOCKS SSSERVER DNSFORWARDER ADBYBY \
                    FRPC FRPS TUNSAFE ALIDDNS SMARTDNS SRELAY XRAY V2RAY TROJAN \
                    KOOLPROXY CADDY ADGUARDHOME WYY ZEROTIER; do
          sed -i "/CONFIG_FIRMWARE_INCLUDE_$item/d" .config
        done

        # 自定义功能配置
        cat <<EOF >> .config
CONFIG_FIRMWARE_INCLUDE_TUNSAFE=y
CONFIG_FIRMWARE_INCLUDE_ZEROTIER=n
CONFIG_FIRMWARE_INCLUDE_ADBYBY=n
EOF

    # ==================== 6. 执行编译 ====================
    - name: Build firmware
      run: |
        cd padavan/${{ env.WORKSPACE }}
        
        # 设置工具链路径
        echo "$GITHUB_WORKSPACE/padavan/toolchain-mipsel/${{ env.TOOLCHAIN_DIR }}/bin" >> $GITHUB_PATH
        
        # 清理并编译
        ./clear_tree
        echo "=== 开始编译 ==="
        fakeroot ./build_firmware_modify ${{ env.TNAME }} -j$(nproc)
        
        # 产物处理
        mkdir -p $GITHUB_WORKSPACE/output
        [ -d "images" ] && mv images/*.trx $GITHUB_WORKSPACE/output/ || {
          echo "::error::未生成固件文件";
          exit 1;
        }

    # ==================== 7. 发布产物 ====================
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.TNAME }}-firmware
        path: output/*.trx
        retention-days: 7

    # ==================== 8. 环境清理 ====================
    - name: Cleanup
      if: always()
      run: |
        sudo rm -rf padavan output
